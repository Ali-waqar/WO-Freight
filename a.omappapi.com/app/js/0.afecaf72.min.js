/*! Actions - Friday, October 14th 2022, 15:30:27 UTC */
"use strict";
(self.webpackChunkom_api_js = self.webpackChunkom_api_js || []).push([
    [0], {
        8026: function(t, i, s) {
            s.r(i), s.d(i, {
                default: function() {
                    return h
                }
            });
            var e = s(5237),
                n = s(4369);
            class o {
                constructor(t, i) {
                    this.on = () => {
                        (0, n.each)(this.elements, ((t, i) => {
                            (0, n.inArray)(this.event, this.callable) ? (0, n.on)(i, this.event + ".omAction." + this.C.id, (() => {
                                i._omns && i._omns[this.event + ".omAction." + this.C.id] && (this.element = i, this.trigger())
                            })) : i.omAction = this
                        }))
                    }, this.off = () => {
                        (0, n.each)(this.elements, ((t, i) => {
                            (0, n.inArray)(this.event, this.callable) && (0, n.off)(i, this.event + ".omAction." + this.C.id)
                        }))
                    }, this.manual = t => {
                        (0, n.inArray)(t, this.elements) && (this.element = t, this.trigger())
                    }, this.trigger = () => {
                        this.actionScripts().then((() => {
                            this[this.type]()
                        }))
                    }, this.actionScripts = () => new Promise((t => {
                        let i = document.createElement("div");
                        i.innerHTML = this.C.Dtr.replaceCustomVars(this.scripts);
                        let s = i.getElementsByTagName("script"),
                            e = (0, n.keys)(s).map((t => {
                                let i = s[t];
                                return this.scripts = this.scripts.replace(i.outerHTML, ""), new Promise((t => {
                                    if (i.src && i.src.length)(0, n.addScript)(i.src, !0, (() => {
                                        t()
                                    }), (() => {
                                        t()
                                    }));
                                    else {
                                        var s = document.createElement("script");
                                        s.type = "text/javascript", s.text = i.innerHTML, this.C.contain.appendChild(s), t()
                                    }
                                }))
                            }));
                        i.innerHTML = this.scripts, this.C.contain.appendChild(i), s || t(), Promise.all(e).then((() => {
                            t()
                        }))
                    })), this.view = () => {
                        (0, n.trigger)(document, "Action.view", {
                            Action: this,
                            Campaign: this.C
                        }), this.C.views[this.options.name] ? (this.track(), this.C.changeView(this.options.name), this.cleanup()) : e.l.error("Cannot change views, the " + this.options.name + " view does not exist.")
                    }, this.close = () => {
                        (0, n.trigger)(document, "Action.close", {
                            Action: this,
                            Campaign: this.C
                        }), this.C.settings.visible || this.C.settings.actionClose ? (this.C.settings.actionClose || this.track(), this.C.startClose(), this.cleanup()) : e.l.error("The campaign is not open, so it cannot be closed.")
                    }, this.redirect = () => {
                        if ((0, n.trigger)(document, "Action.redirect", {
                                Action: this,
                                Campaign: this.C
                            }), !this.options.url) return e.l.error("Cannot redirect. A redirect URL has not been set."), void this.C.startClose();
                        this.options.url = this.parseUrl(this.options.url), this.completeRedirect = !0, (0, n.trigger)(document, "Action.redirect.before", {
                            Action: this,
                            Campaign: this.C
                        }), this.completeRedirect && (this.track(), this.cleanup(), this.C.Timeouts.set((() => {
                            this.handleClose(), window.location.href = this.options.url
                        }), 500))
                    }, this.email = () => {
                        if ((0, n.trigger)(document, "Action.email", {
                                Action: this,
                                Campaign: this.C
                            }), !this.options.email) return e.l.error("Cannot open email client. A mailto address has not been set."), void this.C.startClose();
                        this.options.email = this.sanitize(this.options.email), (0, n.startsWith)(this.options.email, "mailto:") || (this.options.email = "mailto:" + this.options.email), this.completeEmail = !0, (0, n.trigger)(document, "Action.email.before", {
                            Action: this,
                            Campaign: this.C
                        }), this.completeEmail && (this.track(), this.cleanup(), this.handleClose(), window.location.href = this.options.email)
                    }, this.call = () => {
                        if ((0, n.trigger)(document, "Action.call", {
                                Action: this,
                                Campaign: this.C
                            }), !this.options.phone) return e.l.error("Cannot call. A phone number has not been set."), void this.C.startClose();
                        this.options.phone = this.sanitize(this.options.phone), 0 > this.options.phone.indexOf("tel:") && 0 > this.options.phone.indexOf("sms:") && (this.options.phone = "tel:" + this.options.phone), this.track(), this.cleanup(), this.handleClose(), window.location.href = this.options.phone
                    }, this.copy = () => {
                        if ((0, n.trigger)(document, "Action.copy", {
                                Action: this,
                                Campaign: this.C
                            }), !this.options.copy) return void e.l.error("Cannot copy text. No text to copy has been set.");
                        const t = this.element.innerHTML;
                        try {
                            const t = document.createElement("textarea");
                            t.value = this.C.Dtr.replaceCustomVars(this.options.copy), t.setAttribute("readonly", ""), t.style.position = "fixed", t.style.left = "-100%", t.style.top = "-100%", document.body.appendChild(t), t.select(), document.execCommand("copy"), document.body.removeChild(t), this.element.innerHTML = (0, n.__)("Copied!")
                        } catch (t) {
                            this.element.innerHTML = (0, n.__)("Copy Failed"), e.l.error(t)
                        }
                        this.C.Timeouts.set((() => {
                            this.element.innerHTML = t
                        }), 1e3), this.track(), this.cleanup(), this.handleClose()
                    }, this.window = () => {
                        if ((0, n.trigger)(document, "Action.window", {
                                Action: this,
                                Campaign: this.C
                            }), !this.options.url) return e.l.error("Cannot open a new window. A valid URL has not been set."), void this.C.startClose();
                        this.options.url = this.parseUrl(this.options.url), this.track(), this.cleanup(), this.handleClose(), window.open(this.options.url, "_blank")
                    }, this.refresh = () => {
                        this.completeRefresh = !0, (0, n.trigger)(document, "Action.refresh", {
                            Action: this,
                            Campaign: this.C
                        }), this.completeRefresh && (this.track(), this.C.Timeouts.set((() => {
                            this.C.startClose(), this.cleanup(), window.location.reload()
                        }), 500))
                    }, this.restart = () => {
                        if ((0, n.trigger)(document, "Action.restart", {
                                Action: this,
                                Campaign: this.C
                            }), this.C.options.countdown) {
                            this.C.Countdown.initiated = !1;
                            let t = this.C.Countdown.finished.indexOf(this.element); - 1 !== t && this.C.Countdown.finished.splice(t, 1)
                        }
                    }, this.noaction = () => {
                        (0, n.trigger)(document, "Action.noaction", {
                            Action: this,
                            Campaign: this.C
                        }), this.track(), this.cleanNoAction && this.cleanup()
                    }, this.parseUrl = t => (t = this.sanitize(this.C.Dtr.replaceCustomVars(t)), this.options.pass && (0, n.each)(this.C.Optin.data.fields, ((i, s) => {
                        "comments" !== i && (t = (0, n.addQueryArg)(t, "om_" + i, s))
                    })), t), this.sanitize = t => t.replace(new RegExp("&amp;", "g"), "&").replace(new RegExp("&#038;", "g"), "&"), this.track = () => {
                        this.options.track && !this.C.Optin.spam && this.C.Analytics.conversion()
                    }, this.cleanup = () => {
                        this.options.track && (this.C.settings.success = !0), this.C.cleanup()
                    }, this.handleClose = () => {
                        if (this.options.close) return this.C.startClose();
                        this.C.Timeouts.set((() => {
                            this.C.Form.removeLoad()
                        }), 500)
                    }, this.actions = t, this.data = i, this.C = t.C, this.id = i.id || null, this.selector = i.selector || null, this.element = null, this.elements = null, this.event = i.event || "click", this.scripts = i.scripts || "", this.options = i.options || {}, this.type = i.type || "", this.types = ["view", "redirect", "email", "refresh", "close", "window", "restart", "call", "copy", "noaction"], this.callable = ["click", "submit", "omWpformsSuccess"], this.cleanNoAction = !1
                }
                init() {
                    if ((0, n.trigger)(document, "Action.init", {
                            Action: this,
                            Campaign: this.C
                        }), !(0, n.inArray)(this.type, this.types)) throw 'The expected type "' + this.type + '" is not a valid type.';
                    this.elements = (0, n.querySelectorAll)(this.selector), this.elements.length ? this.on() : this.actions.missing.push(this.selector)
                }
            }
            class h {
                constructor(t) {
                    this.C = t, this.actions = [], this.missing = [], (0, n.each)(t.actions, ((t, i) => {
                        this.actions.push(new o(this, i))
                    }))
                }
                init() {
                    (0, n.trigger)(document, "Actions.init", {
                        Actions: this,
                        Campaign: this.C
                    }), (0, n.each)(this.actions, ((t, i) => i.init()))
                }
                off() {
                    (0, n.trigger)(document, "Actions.off", {
                        Actions: this,
                        Campaign: this.C
                    }), (0, n.each)(this.actions, ((t, i) => i.off()))
                }
            }
        }
    }
]);