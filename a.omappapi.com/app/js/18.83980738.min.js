/*! Tags - Wednesday, September 28th 2022, 16:10:28 UTC */
"use strict";
(self.webpackChunkom_api_js = self.webpackChunkom_api_js || []).push([
    [18], {
        5079: function(t, s, e) {
            e.r(s), e.d(s, {
                default: function() {
                    return o
                }
            });
            var i = e(5237),
                a = e(4369);
            class o {
                constructor(t) {
                    this.promises = t => {
                        let s = [],
                            e = "loaded" === window[i.g.GLOBAL_OM].scripts.geolocation.status,
                            a = window[i.g.GLOBAL_OM].scripts.moment.object,
                            o = this.parse(t);
                        return !a && this.hasDateTags(o) && s.push(this.C.defaults.Scripts.moment()), !e && this.hasLocationTags(o) && s.push(this.C.defaults.Scripts.geolocation()), new Promise((t => {
                            s.length || t(), Promise.all(s).then((() => {
                                this.all(), t()
                            }))
                        }))
                    }, this.parse = t => {
                        let s = /\{\{(.*?)\}\}/g;
                        return t.match(s) ? t.match(s).map((t => t.split("|")[0])) : null
                    }, this.hasLocationTags = t => this.valid(t, this.locationTags), this.hasDateTags = t => this.valid(t, this.dateTags), this.all = () => {
                        this.geolocation(), this.dates(), this.journeys(), this.campaignData()
                    }, this.geolocation = () => {
                        let t = window[i.g.GLOBAL_OM].scripts.geolocation;
                        "loaded" === t.status && (0, a.each)(t.data.original, ((t, s) => {
                            let e = [];
                            switch (t) {
                                case "country_name":
                                    e = ["country"];
                                    break;
                                case "country_iso":
                                    e = ["country_code"];
                                    break;
                                case "region_name":
                                    e = ["region", "state", "province", "territory"];
                                    break;
                                case "zip_code":
                                    e = ["zip", "postal_code"];
                                    break;
                                default:
                                    e = (0, a.inArray)(t, this.locationTags) ? [t] : []
                            }
                            e.forEach((t => this.set(t, s)))
                        }))
                    }, this.dates = () => {
                        let t = window[i.g.GLOBAL_OM].scripts.moment.object;
                        t && (this.set("day", t().format("dddd")), this.set("month", t().format("MMMM")), this.set("year", t().format("YYYY")), this.set("date", t().format("MMMM Do, YYYY")))
                    }, this.journeys = () => {
                        this.set("page_url", window.location.href), this.set("referer_url", (0, a.referrer)()), this.set("referrer_url", (0, a.referrer)()), this.set("pages_visited", i.R9.get("omSessionPageviews")), this.set("time_on_site", Math.round(((0, a.currentTime)() - i.R9.get("omSessionStart")) / 1e3)), this.set("visit_timestamp", i.R9.get("omSessionStart")), this.set("page_title", document.title)
                    }, this.campaignData = () => {
                        this.set("cn", this.C.data.name), this.set("campaign_name", this.C.data.name)
                    }, this.fields = t => {
                        this.C.Form.getFieldNames().forEach((s => {
                            if (void 0 !== t[s] && 0 < t[s].length && (this.set(`form_${s}`, t[s]), "name" === s)) {
                                let e = t[s].split(" ");
                                this.set("form_first_name", e[0]), this.set("form_last_name", e[1])
                            }
                        }))
                    }, this.valid = (t, s) => !!t && 0 < t.filter((t => (0, a.inArray)(t.replace("{{", "").replace("}}", ""), s))).length, this.set = (t, s) => {
                        window[i.g.GLOBAL_OM].custom[t] = s
                    }, this.C = t, this.locationTags = ["country", "country_code", "zip", "postal_code", "region_code", "region", "state", "territory", "province", "city", "town", "latitude", "longitude"], this.dateTags = ["day", "month", "year", "date"], this.init()
                }
                init() {
                    (0, a.trigger)(document, "Tags.init", {
                        Campaign: this.C
                    }), this.geolocation(), this.dates()
                }
            }
        }
    }
]);